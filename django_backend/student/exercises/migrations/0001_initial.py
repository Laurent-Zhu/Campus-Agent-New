# Generated by Django 5.2.4 on 2025-07-15 16:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("textbook", "教材"),
                            ("lecture", "讲义"),
                            ("paper", "论文"),
                            ("example", "案例"),
                            ("other", "其他"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(upload_to="documents/")),
                ("content", models.TextField(blank=True)),
                ("summary", models.TextField(blank=True)),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                ("is_processed", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="KnowledgePoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("difficulty_level", models.FloatField(default=0.5)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="exercises.knowledgepoint",
                    ),
                ),
                (
                    "prerequisite",
                    models.ManyToManyField(
                        blank=True,
                        related_name="required_by",
                        to="exercises.knowledgepoint",
                    ),
                ),
                (
                    "related_documents",
                    models.ManyToManyField(
                        blank=True,
                        related_name="knowledge_points",
                        to="exercises.document",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("mc", "选择题"),
                            ("tf", "判断题"),
                            ("fb", "填空题"),
                            ("code", "编程题"),
                            ("doc", "文档分析题"),
                        ],
                        default="mc",
                        max_length=10,
                    ),
                ),
                ("answer", models.JSONField(default=dict)),
                ("solution_steps", models.JSONField(default=list)),
                ("explanation", models.TextField(blank=True)),
                ("calculated_difficulty", models.FloatField(default=0.5)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "简单"),
                            ("medium", "中等"),
                            ("hard", "困难"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "exercise_type",
                    models.CharField(
                        choices=[
                            ("knowledge", "知识点巩固"),
                            ("weakness", "弱点专项"),
                            ("simulation", "模拟测试"),
                        ],
                        default="knowledge",
                        help_text="练习类型：知识点巩固、弱点专项、模拟测试",
                        max_length=20,
                    ),
                ),
                ("hints", models.JSONField(default=list)),
                ("common_mistakes", models.JSONField(default=list)),
                ("feedback_template", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "source_document",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="exercises.document",
                    ),
                ),
                (
                    "knowledge_points",
                    models.ManyToManyField(
                        related_name="exercises", to="exercises.knowledgepoint"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fastapi_user_id", models.IntegerField(unique=True)),
                ("username", models.CharField(max_length=100)),
                ("knowledge_mastery", models.JSONField(default=dict)),
                ("skill_distribution", models.JSONField(default=dict)),
                ("learning_style", models.CharField(blank=True, max_length=50)),
                ("preferred_difficulty", models.FloatField(default=0.5)),
                ("correct_count", models.IntegerField(default=0)),
                ("total_exercises", models.IntegerField(default=0)),
                ("correct_rate", models.FloatField(default=0)),
                ("avg_time_per_question", models.FloatField(default=0)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "weak_knowledge_points",
                    models.ManyToManyField(
                        blank=True,
                        related_name="weak_student_profiles",
                        to="exercises.knowledgepoint",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExerciseAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fastapi_user_id", models.IntegerField()),
                ("username", models.CharField(max_length=100)),
                ("student_answer", models.JSONField()),
                ("attempt_number", models.PositiveIntegerField(default=1)),
                ("time_spent", models.PositiveIntegerField(default=0)),
                ("used_hints", models.JSONField(default=list)),
                ("is_correct", models.BooleanField()),
                ("score", models.FloatField(blank=True, null=True)),
                ("partial_scores", models.JSONField(blank=True, null=True)),
                ("feedback", models.TextField(blank=True)),
                ("detailed_feedback", models.JSONField(default=dict)),
                ("ai_feedback", models.TextField(blank=True)),
                ("feedback_rating", models.SmallIntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempts",
                        to="exercises.exercise",
                    ),
                ),
            ],
            options={
                "verbose_name": "练习记录",
                "verbose_name_plural": "练习记录",
                "ordering": ["-created_at"],
                "unique_together": {("fastapi_user_id", "exercise", "attempt_number")},
            },
        ),
    ]
